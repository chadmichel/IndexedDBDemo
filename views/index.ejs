<html xmlns="http://www.w3.org/1999/html">

<head>

<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.0/jquery.min.js"></script>
<script src="http://ajax.aspnetcdn.com/ajax/knockout/knockout-2.2.1.js"></script>

<link href="http://netdna.bootstrapcdn.com/twitter-bootstrap/2.2.2/css/bootstrap-combined.min.css" rel="stylesheet" />
<script src="http://netdna.bootstrapcdn.com/twitter-bootstrap/2.2.2/js/bootstrap.min.js"></script>

<script src="tiny_mce/jquery.tinymce.js"></script>

<link href="stylesheets/style.css" rel="stylesheet" />

<script src="javascripts/notes.js"></script>

<script>

    $(function() {

(function($) {
var instances_by_id = {} // needed for referencing instances during updates.
  , init_queue = $.Deferred() // jQuery deferred object used for creating TinyMCE instances synchronously
  , init_queue_next = init_queue;
init_queue.resolve();
ko.bindingHandlers.tinymce = {
    init: function (element, valueAccessor, allBindingsAccessor, context) {
        var init_arguments = arguments;
        var options = allBindingsAccessor().tinymceOptions || {};
        var modelValue = valueAccessor();
        var value = ko.utils.unwrapObservable(valueAccessor());
        var el = $(element);

        options.setup = function (ed) {
            ed.onChange.add(function (editor, l) { //handle edits made in the editor. Updates after an undo point is reached.
                if (ko.isWriteableObservable(modelValue)) {
                    modelValue(l.content);
                }
            });

            //This is required if you want the HTML Edit Source button to work correctly
            ed.onBeforeSetContent.add(function (editor, l) {
                if (ko.isWriteableObservable(modelValue)) {
                    modelValue(l.content);
                }
            });

           ed.onPaste.add(function (ed, evt) { // The paste event for the mouse paste fix.
                var doc = ed.getDoc();

                if (ko.isWriteableObservable(modelValue)) {
                    setTimeout(function () { modelValue(ed.getContent({ format: 'raw' })); }, 10);
                }

            });

            ed.onInit.add(function (ed, evt) { // Make sure observable is updated when leaving editor.
                var doc = ed.getDoc();
                tinymce.dom.Event.add(doc, 'blur', function (e) {
                    if (ko.isWriteableObservable(modelValue)) {
                        modelValue(ed.getContent({ format: 'raw' }));
                    }
                });
            });

        };

        //handle destroying an editor (based on what jQuery plugin does)
        ko.utils.domNodeDisposal.addDisposeCallback(element, function () {
            $(element).parent().find("span.mceEditor,div.mceEditor").each(function (i, node) {
                var tid = node.id.replace( /_parent$/, '' );
                var ed = tinyMCE.get(tid);
                if (ed) {
                    ed.remove();
                    // remove referenced instance if possible.
                    if(instances_by_id[tid]){
                      delete instances_by_id[tid];
                    }
                }
            });
        });

        // TinyMCE attaches to the element by DOM id, so we need to make one for the element if it doesn't have one already.
        if (!element.id) {
            element.id = tinyMCE.DOM.uniqueId();
        }

        // create each tinyMCE instance synchronously. This addresses an issue when working with foreach bindings
        init_queue_next = init_queue_next.pipe(function () {
            var defer = $.Deferred();
            var init_options = $.extend({}, options, {
                mode: 'none',
                init_instance_callback: function(instance) {
                    instances_by_id[element.id] = instance;
                    ko.bindingHandlers.tinymce.update.apply(undefined,init_arguments);
                    defer.resolve(element.id);
                    if (options.hasOwnProperty("init_instance_callback")) {
                        options.init_instance_callback(instance);
                    }
                }
            });
            setTimeout(function() {
                tinyMCE.init(init_options);
                setTimeout(function () {
                    tinyMCE.execCommand("mceAddControl", true, element.id);
                }, 0);
            },0);
            return defer.promise();
        });
        el.val(value);
    },
    update: function (element, valueAccessor, allBindingsAccessor, context) {
        var el = $(element);
        var value = ko.utils.unwrapObservable(valueAccessor());
        var id = el.attr('id');

        //handle programmatic updates to the observable
        // also makes sure it doesn't update it if it's the same.
        // otherwise, it will reload the instance, causing the cursor to jump.
        if (id !== undefined && id !== '' && instances_by_id.hasOwnProperty(id)) {
            var content = instances_by_id[id].getContent({ format: 'raw' });
            if (content !== value) {
                el.val(value);
            }
        }
    }
};
}(jQuery));

        $('#noteBody').tinymce({
            // Location of TinyMCE script
            script_url : 'tiny_mce/tiny_mce.js'
        });

    });


</script>

</head>

<body>

<div class="container-fluid">
    <div class="row-fluid">
        <div class="span2">
            <table class="table" data-bind="foreach: notes">
                <tr>
                    <td data-bind="text: title, click: $parent.load"></td>
                </tr>
            </table>
        </div>
        <div class="span10">
            <div>
                <button data-bind="click: create, enable: isNewEnabled" >Create</button>
                <button data-bind="click: save, enable: isSaveEnabled" >Save</button>
            </div>

            <div>

                <fieldset>
                    <label for="titleText">Title</label>
                    <input id="noteTitle" type="text" data-bind="value: activeTitle" />
                    <label for="bodyText">Body</label>
                    <textarea id="noteBody" class="tinymce" data-bind="value: activeBody" />
                </fieldset>
            </div>
        </div>
    </div>
</div>

</body>

</html>
